# A particular version of a Schematron document used to check FindingAids for Issues
#
# Generated by XML processing of a schematron file
class Schematron < ActiveRecord::Base
  # Internal validator class (preferred over validates_each bc YARD can't see validates_each)
  class SchematronFileValidator < ActiveModel::EachValidator
    # SchematronFile exists with digest == value
    def validate_each(record, attribute, value)
      record.errors.add(attribute, "must be associated with an extant SchematronFile") unless SchematronFile[value].is_a? SchematronFile
    end
  end

  has_many :issues, dependent: :destroy, inverse_of: :schematron
  has_many :runs
  accepts_nested_attributes_for :issues

  after_destroy :delete_file

  validates :digest,
            length: {is: 64},
            format: {with: /[a-zA-Z0-9]+/},
            presence: true,
            uniqueness: true,
            schematron_file: true

  # Alternate convenience constructor
  #
  # @param sf [SchematronFile] the schematronFile to find or create a record from
  def self.create_from_file(sf)
    if sf.kind_of? IO
      sf = SchematronFile.new(sf.read)
    end

    me = Schematron.find_by(digest: sf.digest) || Schematron.new(digest: sf.digest,
                                                                 issues_attributes: sf.issue_attrs)
    if me.persisted?
      me.touch
    else
      me.save
    end

    me
  end

  # Gets most recently created Schematron
  #
  # @return [Schematron] the most recently created Schematron record
  def self.current
    order(updated_at: :desc).first
  end

  # @return [SchematronFile] the SchematronFile associated with this record
  def file
    SchematronFile[digest]
  end

  private
  # Callback to delete related SchematronFile
  def delete_file
    File.unlink file
  end

end
